{
	"info": {
		"_postman_id": "60f7fcb5-f110-4471-87eb-641a147e0965",
		"name": "SwaggerUI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24943723"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "deletes a Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.message).to.eql(\"35\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pet uploadImage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.code).to.eql(200)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/shali/Pictures/Screenshot from 2022-12-14 13-41-39.png"
								},
								{
									"key": "petId",
									"value": "35",
									"type": "text",
									"disabled": true
								},
								{
									"key": "additionalMetadata",
									"value": "dog",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petid/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petid",
									"value": "36"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.id).to.eql(35)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.id).to.eql(35)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 35,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"dog\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"photoUrls1\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.category.name).to.eql(\"cat\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 35,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"cat\"\n  }\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "find Pets by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"array\")",
									"    pm.expect(jsonData[0].status).to.eql(\"available\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.message).to.eql(\"35\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "wewrewtw",
									"type": "text"
								},
								{
									"key": "status",
									"value": "available",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "35"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Place an order for Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.id).to.eql(4)",
									"    pm.expect(jsonData.status).to.eql(\"placed\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 4,\n  \"petId\": 35,\n  \"quantity\": 1,\n  \"shipDate\": \"2022-12-20T07:41:47.691Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "returns pet inventory status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.totvs).to.eql(1)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "find Purchase Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.id).to.eql(4)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.code).to.eql(200)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "abc123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 123,\n  \"username\": \"ShaliniIruvuru\",\n  \"firstName\": \"Shalini\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"ShaliniIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818261\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Created with List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.code).to.eql(200)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n{\n  \"id\": 123,\n  \"username\": \"ShaliniIruvuru123\",\n  \"firstName\": \"Shalini\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"ShaliniIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818261\",\n  \"userStatus\": 1\n},\n{\n  \"id\": 234,\n  \"username\": \"VenkiIruvuru\",\n  \"firstName\": \"Venki\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"VenkiIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818268\",\n  \"userStatus\": 2\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates list of users with given  input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.message).to.eql(\"ok\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n{\n  \"id\": 3,\n  \"username\": \"ShaliniIruvuru1234\",\n  \"firstName\": \"Shalini\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"ShaliniIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818261\",\n  \"userStatus\": 1\n},\n{\n  \"id\": 2,\n  \"username\": \"VenkiIruvuru\",\n  \"firstName\": \"Venki\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"VenkiIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818268\",\n  \"userStatus\": 2\n},\n{\n  \"id\": 4,\n  \"username\": \"SudeekshaIruvuru\",\n  \"firstName\": \"Sudeeksha\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"SudeekshaIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818291\",\n  \"userStatus\": 3\n}\n\n\n\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.username).to.eql(\"Shalini Iruvuru\")",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "ShaliniIruvuru"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.code).to.eql(200)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"userName\": \"PiyaIruvuru\",\n  \"firstName\": \"Shalini\",\n  \"lastName\": \"Iruvuru\",\n  \"email\": \"ShaliniIruvuru@gmail.com\",\n  \"password\": \"password\",\n  \"phone\": \"9542818261\",\n  \"userStatus\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "PiyaIruvuru"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleted user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs user into the system",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?userName=ShaliniIruvuru&password=password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "userName",
									"value": "ShaliniIruvuru"
								},
								{
									"key": "password",
									"value": "password"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validating status code\",()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"const jsonData= pm.response.json()",
									"pm.test(\"validating the response body\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"    pm.expect(jsonData.code).to.eql(200)",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}